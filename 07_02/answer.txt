jjsを実行し、ストリームライブラリを使用して、次の問題に対する解法をインタラクティブに求めなさい。
問題：あるファイルに含まれている長い単語(12文字より長い)を重複なしですべてソートして表示しなさい。
最初に単語を読み込んで、長い単語を選択してという具合に行いなさい。このインタラクティブな取り組み方は、
通常のワークフローと比較してどうですか。
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

// 2-3のJavaの例
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

	public static void main(String[] args) throws IOException {
        String contents = new String(Files.readAllBytes(
                Paths.get("./alice.txt")), StandardCharsets.UTF_8);
        List<String> words = Arrays.asList(contents.split("[\\P{L}]+"));

        long five = words.stream().filter(w -> {
        		if (w.length() > 12) {
        			System.out.println(w); // 33個の12文字以上の文字列のうち、5つ分だけ出力される。
        			return true;
        		} else {
        			return false;
        		}
        	}).limit(5).count();
        System.out.println(five);

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
jjsによる呼び出し例.ファイルリードがうまくいかない・・・パス指定がおかしい？


D:\git\j8\07_02>jjs
var contentsByte = java.nio.file.Files.readAllBytes(java.nio.file.Paths.get("./alice.txt"))
var contents = new String(contentsByte, java.nio.charset.StandardCharsets.UTF_8)
var split = contents.split("[\\P{L}]+")
var words = java.util.Arrays.asList(split)
words.stream().filter(function(w) {return w.length() > 12}).count()

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
記載が冗長で非常に手間がかかる。JavaはJavaで書いた方が素直と考える。


